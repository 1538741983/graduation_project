@model OJ.OJService.ProblemDO
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>ProblemDO</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Title)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Title)
            @Html.ValidationMessageFor(model => model.Title)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Describe)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Describe)
            @Html.ValidationMessageFor(model => model.Describe)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Input)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Input)
            @Html.ValidationMessageFor(model => model.Input)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Output)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Output)
            @Html.ValidationMessageFor(model => model.Output)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Sample_input)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Sample_input)
            @Html.ValidationMessageFor(model => model.Sample_input)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Sample_output)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Sample_output)
            @Html.ValidationMessageFor(model => model.Sample_output)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Fg_special)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Fg_special)
            @Html.ValidationMessageFor(model => model.Fg_special)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Hint)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Hint)
            @Html.ValidationMessageFor(model => model.Hint)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Source)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Source)
            @Html.ValidationMessageFor(model => model.Source)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.In_date)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.In_date)
            @Html.ValidationMessageFor(model => model.In_date)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.time_limit)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.time_limit)
            @Html.ValidationMessageFor(model => model.time_limit)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.memory_limit)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.memory_limit)
            @Html.ValidationMessageFor(model => model.memory_limit)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.defunct)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.defunct)
            @Html.ValidationMessageFor(model => model.defunct)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.accepted)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.accepted)
            @Html.ValidationMessageFor(model => model.accepted)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.submit)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.submit)
            @Html.ValidationMessageFor(model => model.submit)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.solved)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.solved)
            @Html.ValidationMessageFor(model => model.solved)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.difficulty)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.difficulty)
            @Html.ValidationMessageFor(model => model.difficulty)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.uploader)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.uploader)
            @Html.ValidationMessageFor(model => model.uploader)
        </div>

        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
